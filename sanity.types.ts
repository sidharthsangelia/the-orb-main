/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type CommunityPage = {
  _id: string;
  _type: "communityPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  heroSection?: {
    badge?: string;
    mainHeading?: string;
    secondaryHeading?: string;
    description?: string;
    joinMovementUrl?: string;
    founderMessageUrl?: string;
    impactStats?: Array<{
      value?: number;
      label?: string;
      icon?: "TreePine" | "Users" | "Globe" | "Target";
      _key: string;
    }>;
  };
  testimonialsSection?: {
    title?: string;
    description?: string;
    testimonials?: Array<{
      name?: string;
      role?: string;
      content?: string;
      avatar?: string;
      _key: string;
    }>;
  };
  achievementsSection?: {
    title?: string;
    description?: string;
    achievements?: Array<{
      title?: string;
      description?: string;
      icon?: "Award" | "TrendingUp" | "Users2" | "Lightbulb";
      _key: string;
    }>;
  };
  ctaSection?: {
    title?: string;
    description?: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
    hashtags?: string;
  };
};

export type CommunityRole = {
  _id: string;
  _type: "communityRole";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  key?: string;
  title?: string;
  impact?: string;
  description?: string;
  skills?: Array<string>;
  color?: string;
  icon?: string;
  actions?: Array<string>;
  joinTeamUrl?: string;
};

export type FounderMessage = {
  _id: string;
  _type: "founderMessage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  founderName?: string;
  founderTitle?: string;
  founderImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  message?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h2" | "h3" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  featuredQuote?: {
    text?: string;
    showQuote?: boolean;
  };
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
    ogImage?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  };
  publishedAt?: string;
  isActive?: boolean;
};

export type AboutPage = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  tagline?: string;
  introText?: string;
  stats?: Array<{
    value?: string;
    label?: string;
    _type: "stat";
    _key: string;
  }>;
  mission?: string;
  vision?: string;
  coreValues?: Array<{
    title?: string;
    description?: string;
    icon?: string;
    _type: "value";
    _key: string;
  }>;
  whatWeDo?: Array<{
    title?: string;
    description?: string;
    icon?: string;
    _type: "activity";
    _key: string;
  }>;
  journey?: Array<{
    year?: string;
    title?: string;
    description?: string;
    _type: "milestone";
    _key: string;
  }>;
  seoTitle?: string;
  seoDescription?: string;
};

export type CarouselPost = {
  _id: string;
  _type: "carouselPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slides?: Array<{
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    caption?: string;
    order?: number;
    _type: "slide";
    _key: string;
  }>;
  category?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "category";
  };
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  color?: Color;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  featured?: boolean;
  order?: number;
  seo?: Seo;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
    _key: string;
  }>;
  excerpt?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  tags?: Array<string>;
  date?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  status?: "draft" | "published" | "archived";
  featured?: boolean;
  isTrending?: boolean;
  readingTime?: number;
  relatedPosts?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "post";
  }>;
  seo?: Seo;
};

export type Seo = {
  _type: "seo";
  metaTitle?: string;
  metaDescription?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  keywords?: Array<string>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  picture?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  bio?: string;
  role?: string;
  social?: {
    website?: string;
    twitter?: string;
    linkedin?: string;
    instagram?: string;
    github?: string;
  };
  email?: string;
  featured?: boolean;
};

export type Newsletter = {
  _id: string;
  _type: "newsletter";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  subject?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  status?: "draft" | "scheduled" | "sent";
};

export type Subscriber = {
  _id: string;
  _type: "subscriber";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  email?: string;
};

export type Partner = {
  _id: string;
  _type: "partner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altText?: string;
  website?: string;
  description?: string;
  priority?: number;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  socialLinks?: Array<{
    platform?: "instagram" | "linkedin" | "github" | "twitter" | "facebook" | "youtube" | "threads" | "pinterest" | "dribbble";
    url?: string;
    _type: "socialLink";
    _key: string;
  }>;
  contactEmail?: string;
  phoneNumber?: string;
  addressLine1?: string;
  addressLine2?: string;
  city?: string;
  state?: string;
  zipCode?: string;
  country?: string;
  googleMapsLink?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  favicon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  metadataBase?: string;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistOutputType = {
  _type: "sanity.assist.output.type";
  type?: string;
};

export type SanityAssistOutputField = {
  _type: "sanity.assist.output.field";
  path?: string;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
  output?: Array<{
    _key: string;
  } & SanityAssistOutputField | {
    _key: string;
  } & SanityAssistOutputType>;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = CommunityPage | CommunityRole | FounderMessage | AboutPage | CarouselPost | Category | Post | Seo | Author | Newsletter | Subscriber | Partner | Settings | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistOutputType | SanityAssistOutputField | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField | Color | RgbaColor | HsvaColor | HslaColor | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./app/(blog)/posts/[slug]/page.tsx
// Variable: postSlugs
// Query: *[_type == "post" && defined(slug.current)]{"slug": slug.current}
export type PostSlugsResult = Array<{
  slug: string | null;
}>;

// Source: ./app/sitemap.ts
// Variable: sitemapPostsQuery
// Query: *[_type == "post" && defined(slug.current)] {    "slug": slug.current,    _updatedAt,    date,    _id  } | order(date desc, _updatedAt desc)
export type SitemapPostsQueryResult = Array<{
  slug: string | null;
  _updatedAt: string;
  date: string | null;
  _id: string;
}>;
// Variable: allCategoriesQuery
// Query: *[_type == "category" && defined(slug.current)] {    "slug": slug.current,    _updatedAt,    "postCount": count(*[_type == "post" && references(^._id) && defined(slug.current)])  }
export type AllCategoriesQueryResult = Array<{
  slug: string | null;
  _updatedAt: string;
  postCount: number;
}>;

// Source: ./sanity/lib/queries.ts
// Variable: guidesQuery
// Query: *["guides" in categories[]->slug.current && status == "published"]{  _id,  title,  "slug": slug.current,  "description": coalesce(excerpt, ""),  "image": coverImage.asset->url,  "type": type,  "downloadCount": downloadCount,  "category": categories[0]->title,   author-> {      name,      picture    },}
export type GuidesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | "";
  image: string | null;
  type: null;
  downloadCount: null;
  category: string | null;
  author: {
    name: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: educationQuery
// Query: *[_type == "post" && "education" in categories[]->slug.current && status == "published"]{  _id,  title,  "slug": slug.current,  "description": coalesce(excerpt, ""),  "image": coverImage.asset->url,  "type": type,  "duration": duration,  "level": level,  author-> {      name,      picture    },}
export type EducationQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | "";
  image: string | null;
  type: null;
  duration: null;
  level: null;
  author: {
    name: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: climateStoriesQuery
// Query: *[_type == "post" && "climate-stories" in categories[]->slug.current && status == "published"]{  _id,  title,  "slug": slug.current,  "description": coalesce(excerpt, ""),  "image": coverImage.asset->url,  organization,  impact,  readTime,  date,  author-> {      name,      picture    },}
export type ClimateStoriesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | "";
  image: string | null;
  organization: null;
  impact: null;
  readTime: null;
  date: string | null;
  author: {
    name: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
}>;
// Variable: youthVoicesQuery
// Query: *[_type == "post" && "youth-voices" in categories[]->slug.current && status == "published"]{  _id,  title,  "slug": slug.current,  "description": coalesce(excerpt, ""),  "image": coverImage.asset->url,  "author": author->name,  readTime,  likes,  date,  location,  author-> {      name,      picture    },}
export type YouthVoicesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | "";
  image: string | null;
  author: {
    name: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  readTime: null;
  likes: null;
  date: string | null;
  location: null;
}>;
// Variable: allPostsQuery
// Query: {    "posts": *[_type == "post" && defined(slug.current)]       | order(date desc, _updatedAt desc)  {          _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )      },    "total": count(*[_type == "post" && defined(slug.current)])  }
export type AllPostsQueryResult = {
  posts: Array<{
    _id: string;
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: "image";
    } | null;
    date: string;
    author: {
      name: string | "Anonymous";
      picture: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
    } | null;
    category: null;
    readingTime: number;
  }>;
  total: number;
};
// Variable: featuredPostsQuery
// Query: *[_type == "post" && defined(slug.current) && featured == true]   | order(date desc, _updatedAt desc) [0...3] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type FeaturedPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: recentPostsQuery
// Query: *[_type == "post" && defined(slug.current)]   | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type RecentPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: postsByAuthorQuery
// Query: *[_type == "post" && defined(slug.current) && author->slug.current == $authorSlug]   | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type PostsByAuthorQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: relatedPostsQuery
// Query: *[_type == "post" && defined(slug.current) && _id != $postId &&     (category->_id == $categoryId || author->_id == $authorId)]   | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type RelatedPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: searchPostsQuery
// Query: *[_type == "post" && defined(slug.current) &&     (title match $searchTerm + "*" || excerpt match $searchTerm + "*" ||      pt::text(content) match $searchTerm + "*")]   | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type SearchPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  socialLinks?: Array<{
    platform?: "dribbble" | "facebook" | "github" | "instagram" | "linkedin" | "pinterest" | "threads" | "twitter" | "youtube";
    url?: string;
    _type: "socialLink";
    _key: string;
  }>;
  contactEmail?: string;
  phoneNumber?: string;
  addressLine1?: string;
  addressLine2?: string;
  city?: string;
  state?: string;
  zipCode?: string;
  country?: string;
  googleMapsLink?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  favicon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  metadataBase?: string;
} | null;
// Variable: heroQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {    content,      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type HeroQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
} | null;
// Variable: moreStoriesQuery
// Query: *[_type == "post" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type MoreStoriesQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug] [0] {    content,      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type PostQueryResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
    _key: string;
  }> | null;
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
} | null;
// Variable: heroPostsGridQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc)[0...5] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type HeroPostsGridQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: tripleCardGridQuery
// Query: *[_type == "post" && defined(slug.current)] | order(date desc, _updatedAt desc)[1...4] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type TripleCardGridQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: trendingPostsQuery
// Query: *[_type == "post" && defined(slug.current) && isTrending == true] | order(date desc) [0...10] {      _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )  }
export type TrendingPostsQueryResult = Array<{
  _id: string;
  status: "draft" | "published";
  title: string | "Untitled";
  slug: string | null;
  excerpt: string | null;
  coverImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
  } | null;
  date: string;
  author: {
    name: string | "Anonymous";
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  category: null;
  readingTime: number;
}>;
// Variable: partnersQuery
// Query: *[_type == "partner"] | order(_createdAt desc) {  _id,  title,  "logo": logo.asset->url,  website}
export type PartnersQueryResult = Array<{
  _id: string;
  title: null;
  logo: string | null;
  website: string | null;
}>;
// Variable: categoriesQuery
// Query: *[_type == "category" && defined(slug.current)] | order(title asc) {    _id,    title,    slug,    description,    color,    image,    "postCount": count(*[_type == "post" && references(^._id) && defined(slug.current)])  }
export type CategoriesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  color: Color | null;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  postCount: number;
}>;
// Variable: categoryQuery
// Query: *[_type == "category" && slug.current == $slug][0] {    _id,    title,    "slug": slug.current,    description,    "color": coalesce(color.hex, "#3B82F6"),    "image": image.asset->url,    seo  }
export type CategoryQueryResult = {
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | null;
  color: string | "#3B82F6";
  image: string | null;
  seo: Seo | null;
} | null;
// Variable: carouselPostsQuery
// Query: *[_type == "carouselPost"] | order(publishedAt desc){  _id,  title,  slug,  slides[]{    image{      asset->{        url      },      alt    },    caption,    order  },  description,  author->{    name  },  publishedAt}
export type CarouselPostsQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: null;
  slides: Array<{
    image: {
      asset: {
        url: string | null;
      } | null;
      alt: null;
    } | null;
    caption: string | null;
    order: number | null;
  }> | null;
  description: null;
  author: null;
  publishedAt: null;
}>;
// Variable: sidebarCategoriesQuery
// Query: *[_type == "category" && defined(slug.current)]   | order(order asc, title asc) [0...8] {    _id,    title,    "slug": slug.current,    description,    "color": coalesce(color.hex, "#3B82F6"),    "image": image.asset->url,    featured,    "postCount": count(*[_type == "post" && references(^._id) && defined(slug.current) && status == "published"])  }
export type SidebarCategoriesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | null;
  color: string | "#3B82F6";
  image: string | null;
  featured: boolean | null;
  postCount: number;
}>;
// Variable: trendingPostsMarqueeQuery
// Query: *[_type == "post" && defined(slug.current) && isTrending == true && status == "published"]   | order(date desc) [0...10] {    _id,    title,    "slug": slug.current,    "author": author->name,    "category": category->title,    "date": coalesce(date, _updatedAt)  }
export type TrendingPostsMarqueeQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  author: string | null;
  category: null;
  date: string;
}>;
// Variable: featuredCategoriesQuery
// Query: *[_type == "category" && defined(slug.current) && featured == true]   | order(order asc, title asc) [0...6] {    _id,    title,    "slug": slug.current,    description,    "color": coalesce(color.hex, "#3B82F6"),    image {      asset-> {        _id,        url      },      alt    },    "postCount": count(*[_type == "post" && references(^._id) && defined(slug.current) && status == "published"])  }
export type FeaturedCategoriesQueryResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | null;
  color: string | "#3B82F6";
  image: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  postCount: number;
}>;
// Variable: allCategorySlugsQuery
// Query: *[_type == "category" && defined(slug.current)] {    "slug": slug.current  }
export type AllCategorySlugsQueryResult = Array<{
  slug: string | null;
}>;
// Variable: categoryWithRecentPostsQuery
// Query: *[_type == "category" && slug.current == $slug][0] {    _id,    title,    "slug": slug.current,    description,    "color": coalesce(color.hex, "#3B82F6"),    image {      asset-> {        _id,        url      },      alt    },    featured,    "postCount": count(*[_type == "post" && references(^._id) && defined(slug.current)]),    "recentPosts": *[_type == "post" && references(^._id) && defined(slug.current)]       | order(date desc) [0...3] {          _id,  "status": select(_originalId in path("drafts.**") => "draft", "published"),  "title": coalesce(title, "Untitled"),  "slug": slug.current,  excerpt,  coverImage,  "date": coalesce(date, _updatedAt),  "author": author->{    "name": coalesce(name, "Anonymous"),     picture  },  "category": category->{    title,    "color": coalesce(color.hex, "#3B82F6")  },  "readingTime": round(length(pt::text(content)) / 5 / 180 )      }  }
export type CategoryWithRecentPostsQueryResult = {
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | null;
  color: string | "#3B82F6";
  image: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  featured: boolean | null;
  postCount: number;
  recentPosts: Array<{
    _id: string;
    status: "draft" | "published";
    title: string | "Untitled";
    slug: string | null;
    excerpt: string | null;
    coverImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      caption?: string;
      _type: "image";
    } | null;
    date: string;
    author: {
      name: string | "Anonymous";
      picture: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "image";
      } | null;
    } | null;
    category: null;
    readingTime: number;
  }>;
} | null;
// Variable: categoryWithPostsQuery
// Query: *[_type == "category" && slug.current == $slug][0] {    _id,    title,    "slug": slug.current,    description,    "color": coalesce(color.hex, "#3B82F6"),    image {      asset-> {        _id,        url      },      alt    },    featured,    order,    "postCount": count(*[_type == "post" && references(^._id) && defined(slug.current)]),    seo {      metaTitle,      metaDescription,      ogImage {        asset-> {          url        }      }    }  }
export type CategoryWithPostsQueryResult = {
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | null;
  color: string | "#3B82F6";
  image: {
    asset: {
      _id: string;
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
  featured: boolean | null;
  order: number | null;
  postCount: number;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
    ogImage: {
      asset: {
        url: string | null;
      } | null;
    } | null;
  } | null;
} | null;
// Variable: founderMessageQuery
// Query: *[_type == "founderMessage" && isActive == true][0] {    _id,    _createdAt,    _updatedAt,    title,    slug,    founderName,    founderTitle,    founderImage {      asset-> {        _id,        url,        metadata {          dimensions {            width,            height,            aspectRatio          },          lqip        }      },      alt,      hotspot,      crop    },    message,    featuredQuote {      text,      showQuote    },    seo {      metaTitle,      metaDescription,      ogImage {        asset-> {          url        }      }    },    publishedAt,    isActive  }
export type FounderMessageQueryResult = {
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  founderName: string | null;
  founderTitle: string | null;
  founderImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
          aspectRatio: number | null;
        } | null;
        lqip: string | null;
      } | null;
    } | null;
    alt: string | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
  message: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h2" | "h3" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  featuredQuote: {
    text: string | null;
    showQuote: boolean | null;
  } | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
    ogImage: {
      asset: {
        url: string | null;
      } | null;
    } | null;
  } | null;
  publishedAt: string | null;
  isActive: boolean | null;
} | null;
// Variable: founderMessageBySlugQuery
// Query: *[_type == "founderMessage" && slug.current == $slug && isActive == true][0] {    _id,    _createdAt,    _updatedAt,    title,    slug,    founderName,    founderTitle,    founderImage {      asset-> {        _id,        url,        metadata {          dimensions {            width,            height,            aspectRatio          },          lqip        }      },      alt,      hotspot,      crop    },    message,    featuredQuote {      text,      showQuote    },    seo {      metaTitle,      metaDescription,      ogImage {        asset-> {          url        }      }    },    publishedAt,    isActive  }
export type FounderMessageBySlugQueryResult = {
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  slug: Slug | null;
  founderName: string | null;
  founderTitle: string | null;
  founderImage: {
    asset: {
      _id: string;
      url: string | null;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
          aspectRatio: number | null;
        } | null;
        lqip: string | null;
      } | null;
    } | null;
    alt: string | null;
    hotspot: SanityImageHotspot | null;
    crop: SanityImageCrop | null;
  } | null;
  message: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h2" | "h3" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  featuredQuote: {
    text: string | null;
    showQuote: boolean | null;
  } | null;
  seo: {
    metaTitle: string | null;
    metaDescription: string | null;
    ogImage: {
      asset: {
        url: string | null;
      } | null;
    } | null;
  } | null;
  publishedAt: string | null;
  isActive: boolean | null;
} | null;
// Variable: socialMediaPostsQuery
// Query: *[_type == "socialMediaPosts"] | order(_createdAt desc) [0] {    _id,    title,    showInstagram,    showLinkedin,    showTwitter,    "instagramPosts": instagramPosts[isActive == true]{      embedHtml,      fallbackDescription,      isActive    },    "linkedinPosts": linkedinPosts[isActive == true]{      embedHtml,      fallbackDescription,      isActive    },    "twitterPosts": twitterPosts[isActive == true]{      embedHtml,      fallbackDescription,      isActive    },    lastUpdated,    _createdAt,    _updatedAt  }
export type SocialMediaPostsQueryResult = null;
// Variable: COMMUNITY_ROLES_QUERY
// Query: *[_type == "communityRole"]{  key,  title,  impact,  description,  skills,  color,  icon,  actions,  joinTeamUrl} | order(title asc)
export type COMMUNITY_ROLES_QUERYResult = Array<{
  key: string | null;
  title: string | null;
  impact: string | null;
  description: string | null;
  skills: Array<string> | null;
  color: string | null;
  icon: string | null;
  actions: Array<string> | null;
  joinTeamUrl: string | null;
}>;
// Variable: aboutPageQuery
// Query: *[_type == "aboutPage"][0] {    title,    tagline,    introText,    stats[] {      value,      label    },    mission,    vision,    coreValues[] {      title,      description,      icon    },    whatWeDo[] {      title,      description,      icon    },    journey[] {      year,      title,      description    },    seoTitle,    seoDescription  }
export type AboutPageQueryResult = {
  title: string | null;
  tagline: string | null;
  introText: string | null;
  stats: Array<{
    value: string | null;
    label: string | null;
  }> | null;
  mission: string | null;
  vision: string | null;
  coreValues: Array<{
    title: string | null;
    description: string | null;
    icon: string | null;
  }> | null;
  whatWeDo: Array<{
    title: string | null;
    description: string | null;
    icon: string | null;
  }> | null;
  journey: Array<{
    year: string | null;
    title: string | null;
    description: string | null;
  }> | null;
  seoTitle: string | null;
  seoDescription: string | null;
} | null;
// Variable: communityPageQuery
// Query: *[_type == "communityPage"][0] {  heroSection {    badge,    mainHeading,    secondaryHeading,    description,    joinMovementUrl,    founderMessageUrl,    impactStats[] {      value,      label,      icon    }  },  testimonialsSection {    title,    description,    testimonials[] {      name,      role,      content,      avatar    }  },  achievementsSection {    title,    description,    achievements[] {      title,      description,      icon    }  },  ctaSection {    title,    description,    primaryButtonText,    secondaryButtonText,    hashtags  }}
export type CommunityPageQueryResult = {
  heroSection: {
    badge: string | null;
    mainHeading: string | null;
    secondaryHeading: string | null;
    description: string | null;
    joinMovementUrl: string | null;
    founderMessageUrl: string | null;
    impactStats: Array<{
      value: number | null;
      label: string | null;
      icon: "Globe" | "Target" | "TreePine" | "Users" | null;
    }> | null;
  } | null;
  testimonialsSection: {
    title: string | null;
    description: string | null;
    testimonials: Array<{
      name: string | null;
      role: string | null;
      content: string | null;
      avatar: string | null;
    }> | null;
  } | null;
  achievementsSection: {
    title: string | null;
    description: string | null;
    achievements: Array<{
      title: string | null;
      description: string | null;
      icon: "Award" | "Lightbulb" | "TrendingUp" | "Users2" | null;
    }> | null;
  } | null;
  ctaSection: {
    title: string | null;
    description: string | null;
    primaryButtonText: string | null;
    secondaryButtonText: string | null;
    hashtags: string | null;
  } | null;
} | null;
// Variable: resourceDetailQuery
// Query: *[_type == "post" && categories[]->slug.current match $type && slug.current == $slug][0] {    _id,    title,    slug,    content,    excerpt,    coverImage {      asset-> {        url,        metadata {          lqip        }      },      alt    },    author-> {      name,      picture    },    date,    categories[]-> {      title,      slug    },    readingTime  }
export type ResourceDetailQueryResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
    _type: "image";
    _key: string;
  }> | null;
  excerpt: string | null;
  coverImage: {
    asset: {
      url: string | null;
      metadata: {
        lqip: string | null;
      } | null;
    } | null;
    alt: string | null;
  } | null;
  author: {
    name: string | null;
    picture: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  date: string | null;
  categories: Array<{
    title: string | null;
    slug: Slug | null;
  }> | null;
  readingTime: number | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"post\" && defined(slug.current)]{\"slug\": slug.current}": PostSlugsResult;
    "\n  *[_type == \"post\" && defined(slug.current)] {\n    \"slug\": slug.current,\n    _updatedAt,\n    date,\n    _id\n  } | order(date desc, _updatedAt desc)\n": SitemapPostsQueryResult;
    "\n  *[_type == \"category\" && defined(slug.current)] {\n    \"slug\": slug.current,\n    _updatedAt,\n    \"postCount\": count(*[_type == \"post\" && references(^._id) && defined(slug.current)])\n  }\n": AllCategoriesQueryResult;
    "\n*[\"guides\" in categories[]->slug.current && status == \"published\"]{\n  _id,\n  title,\n  \"slug\": slug.current,\n  \"description\": coalesce(excerpt, \"\"),\n  \"image\": coverImage.asset->url,\n  \"type\": type,\n  \"downloadCount\": downloadCount,\n  \"category\": categories[0]->title,\n   author-> {\n      name,\n      picture\n    },\n}\n": GuidesQueryResult;
    "\n*[_type == \"post\" && \"education\" in categories[]->slug.current && status == \"published\"]{\n  _id,\n  title,\n  \"slug\": slug.current,\n  \"description\": coalesce(excerpt, \"\"),\n  \"image\": coverImage.asset->url,\n  \"type\": type,\n  \"duration\": duration,\n  \"level\": level,\n  author-> {\n      name,\n      picture\n    },\n}\n": EducationQueryResult;
    "\n*[_type == \"post\" && \"climate-stories\" in categories[]->slug.current && status == \"published\"]{\n  _id,\n  title,\n  \"slug\": slug.current,\n  \"description\": coalesce(excerpt, \"\"),\n  \"image\": coverImage.asset->url,\n  organization,\n  impact,\n  readTime,\n  date,\n  author-> {\n      name,\n      picture\n    },\n}\n": ClimateStoriesQueryResult;
    "\n*[_type == \"post\" && \"youth-voices\" in categories[]->slug.current && status == \"published\"]{\n  _id,\n  title,\n  \"slug\": slug.current,\n  \"description\": coalesce(excerpt, \"\"),\n  \"image\": coverImage.asset->url,\n  \"author\": author->name,\n  readTime,\n  likes,\n  date,\n  location,\n  author-> {\n      name,\n      picture\n    },\n}\n": YouthVoicesQueryResult;
    "\n  {\n    \"posts\": *[_type == \"post\" && defined(slug.current)]\n       | order(date desc, _updatedAt desc)  {\n        \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n      },\n    \"total\": count(*[_type == \"post\" && defined(slug.current)])\n  }\n": AllPostsQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current) && featured == true] \n  | order(date desc, _updatedAt desc) [0...3] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": FeaturedPostsQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)] \n  | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": RecentPostsQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current) && author->slug.current == $authorSlug] \n  | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": PostsByAuthorQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current) && _id != $postId && \n    (category->_id == $categoryId || author->_id == $authorId)] \n  | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": RelatedPostsQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current) && \n    (title match $searchTerm + \"*\" || excerpt match $searchTerm + \"*\" || \n     pt::text(content) match $searchTerm + \"*\")] \n  | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": SearchPostsQueryResult;
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc) [0] {\n    content,\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": HeroQueryResult;
    "\n  *[_type == \"post\" && _id != $skip && defined(slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": MoreStoriesQueryResult;
    "\n  *[_type == \"post\" && slug.current == $slug] [0] {\n    content,\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": PostQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc)[0...5] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": HeroPostsGridQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current)] | order(date desc, _updatedAt desc)[1...4] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": TripleCardGridQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current) && isTrending == true] | order(date desc) [0...10] {\n    \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n  }\n": TrendingPostsQueryResult;
    "*[_type == \"partner\"] | order(_createdAt desc) {\n  _id,\n  title,\n  \"logo\": logo.asset->url,\n  website\n}": PartnersQueryResult;
    "\n  *[_type == \"category\" && defined(slug.current)] | order(title asc) {\n    _id,\n    title,\n    slug,\n    description,\n    color,\n    image,\n    \"postCount\": count(*[_type == \"post\" && references(^._id) && defined(slug.current)])\n  }\n": CategoriesQueryResult;
    "\n  *[_type == \"category\" && slug.current == $slug][0] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    description,\n    \"color\": coalesce(color.hex, \"#3B82F6\"),\n    \"image\": image.asset->url,\n    seo\n  }\n": CategoryQueryResult;
    "*[_type == \"carouselPost\"] | order(publishedAt desc){\n  _id,\n  title,\n  slug,\n  slides[]{\n    image{\n      asset->{\n        url\n      },\n      alt\n    },\n    caption,\n    order\n  },\n  description,\n  author->{\n    name\n  },\n  publishedAt\n}": CarouselPostsQueryResult;
    "\n  *[_type == \"category\" && defined(slug.current)] \n  | order(order asc, title asc) [0...8] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    description,\n    \"color\": coalesce(color.hex, \"#3B82F6\"),\n    \"image\": image.asset->url,\n    featured,\n    \"postCount\": count(*[_type == \"post\" && references(^._id) && defined(slug.current) && status == \"published\"])\n  }\n": SidebarCategoriesQueryResult;
    "\n  *[_type == \"post\" && defined(slug.current) && isTrending == true && status == \"published\"] \n  | order(date desc) [0...10] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    \"author\": author->name,\n    \"category\": category->title,\n    \"date\": coalesce(date, _updatedAt)\n  }\n": TrendingPostsMarqueeQueryResult;
    "\n  *[_type == \"category\" && defined(slug.current) && featured == true] \n  | order(order asc, title asc) [0...6] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    description,\n    \"color\": coalesce(color.hex, \"#3B82F6\"),\n    image {\n      asset-> {\n        _id,\n        url\n      },\n      alt\n    },\n    \"postCount\": count(*[_type == \"post\" && references(^._id) && defined(slug.current) && status == \"published\"])\n  }\n": FeaturedCategoriesQueryResult;
    "\n  *[_type == \"category\" && defined(slug.current)] {\n    \"slug\": slug.current\n  }\n": AllCategorySlugsQueryResult;
    "\n  *[_type == \"category\" && slug.current == $slug][0] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    description,\n    \"color\": coalesce(color.hex, \"#3B82F6\"),\n    image {\n      asset-> {\n        _id,\n        url\n      },\n      alt\n    },\n    featured,\n    \"postCount\": count(*[_type == \"post\" && references(^._id) && defined(slug.current)]),\n    \"recentPosts\": *[_type == \"post\" && references(^._id) && defined(slug.current)] \n      | order(date desc) [0...3] {\n        \n  _id,\n  \"status\": select(_originalId in path(\"drafts.**\") => \"draft\", \"published\"),\n  \"title\": coalesce(title, \"Untitled\"),\n  \"slug\": slug.current,\n  excerpt,\n  coverImage,\n  \"date\": coalesce(date, _updatedAt),\n  \"author\": author->{\n    \"name\": coalesce(name, \"Anonymous\"), \n    picture\n  },\n  \"category\": category->{\n    title,\n    \"color\": coalesce(color.hex, \"#3B82F6\")\n  },\n  \"readingTime\": round(length(pt::text(content)) / 5 / 180 )\n\n      }\n  }\n": CategoryWithRecentPostsQueryResult;
    "\n  *[_type == \"category\" && slug.current == $slug][0] {\n    _id,\n    title,\n    \"slug\": slug.current,\n    description,\n    \"color\": coalesce(color.hex, \"#3B82F6\"),\n    image {\n      asset-> {\n        _id,\n        url\n      },\n      alt\n    },\n    featured,\n    order,\n    \"postCount\": count(*[_type == \"post\" && references(^._id) && defined(slug.current)]),\n    seo {\n      metaTitle,\n      metaDescription,\n      ogImage {\n        asset-> {\n          url\n        }\n      }\n    }\n  }\n": CategoryWithPostsQueryResult;
    "\n  *[_type == \"founderMessage\" && isActive == true][0] {\n    _id,\n    _createdAt,\n    _updatedAt,\n    title,\n    slug,\n    founderName,\n    founderTitle,\n    founderImage {\n      asset-> {\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          },\n          lqip\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    message,\n    featuredQuote {\n      text,\n      showQuote\n    },\n    seo {\n      metaTitle,\n      metaDescription,\n      ogImage {\n        asset-> {\n          url\n        }\n      }\n    },\n    publishedAt,\n    isActive\n  }\n": FounderMessageQueryResult;
    "\n  *[_type == \"founderMessage\" && slug.current == $slug && isActive == true][0] {\n    _id,\n    _createdAt,\n    _updatedAt,\n    title,\n    slug,\n    founderName,\n    founderTitle,\n    founderImage {\n      asset-> {\n        _id,\n        url,\n        metadata {\n          dimensions {\n            width,\n            height,\n            aspectRatio\n          },\n          lqip\n        }\n      },\n      alt,\n      hotspot,\n      crop\n    },\n    message,\n    featuredQuote {\n      text,\n      showQuote\n    },\n    seo {\n      metaTitle,\n      metaDescription,\n      ogImage {\n        asset-> {\n          url\n        }\n      }\n    },\n    publishedAt,\n    isActive\n  }\n": FounderMessageBySlugQueryResult;
    "\n  *[_type == \"socialMediaPosts\"] | order(_createdAt desc) [0] {\n    _id,\n    title,\n    showInstagram,\n    showLinkedin,\n    showTwitter,\n    \"instagramPosts\": instagramPosts[isActive == true]{\n      embedHtml,\n      fallbackDescription,\n      isActive\n    },\n    \"linkedinPosts\": linkedinPosts[isActive == true]{\n      embedHtml,\n      fallbackDescription,\n      isActive\n    },\n    \"twitterPosts\": twitterPosts[isActive == true]{\n      embedHtml,\n      fallbackDescription,\n      isActive\n    },\n    lastUpdated,\n    _createdAt,\n    _updatedAt\n  }\n": SocialMediaPostsQueryResult;
    "\n*[_type == \"communityRole\"]{\n  key,\n  title,\n  impact,\n  description,\n  skills,\n  color,\n  icon,\n  actions,\n  joinTeamUrl\n} | order(title asc)\n": COMMUNITY_ROLES_QUERYResult;
    "\n  *[_type == \"aboutPage\"][0] {\n    title,\n    tagline,\n    introText,\n    stats[] {\n      value,\n      label\n    },\n    mission,\n    vision,\n    coreValues[] {\n      title,\n      description,\n      icon\n    },\n    whatWeDo[] {\n      title,\n      description,\n      icon\n    },\n    journey[] {\n      year,\n      title,\n      description\n    },\n    seoTitle,\n    seoDescription\n  }\n": AboutPageQueryResult;
    "*[_type == \"communityPage\"][0] {\n  heroSection {\n    badge,\n    mainHeading,\n    secondaryHeading,\n    description,\n    joinMovementUrl,\n    founderMessageUrl,\n    impactStats[] {\n      value,\n      label,\n      icon\n    }\n  },\n  testimonialsSection {\n    title,\n    description,\n    testimonials[] {\n      name,\n      role,\n      content,\n      avatar\n    }\n  },\n  achievementsSection {\n    title,\n    description,\n    achievements[] {\n      title,\n      description,\n      icon\n    }\n  },\n  ctaSection {\n    title,\n    description,\n    primaryButtonText,\n    secondaryButtonText,\n    hashtags\n  }\n}": CommunityPageQueryResult;
    "\n  *[_type == \"post\" && categories[]->slug.current match $type && slug.current == $slug][0] {\n    _id,\n    title,\n    slug,\n    content,\n    excerpt,\n    coverImage {\n      asset-> {\n        url,\n        metadata {\n          lqip\n        }\n      },\n      alt\n    },\n    author-> {\n      name,\n      picture\n    },\n    date,\n    categories[]-> {\n      title,\n      slug\n    },\n    readingTime\n  }\n": ResourceDetailQueryResult;
  }
}
